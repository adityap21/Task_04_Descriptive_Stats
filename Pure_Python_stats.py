{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2c771dd1-8e9f-4375-8901-f2b67ef54ea3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "import math\n",
    "from collections import Counter\n",
    "from typing import List, Dict, Any, Tuple\n",
    "\n",
    "def is_numeric(value: str) -> bool:\n",
    "    try:\n",
    "        float(value)\n",
    "        return True\n",
    "    except (ValueError, TypeError):\n",
    "        return False\n",
    "\n",
    "def compute_numeric_stats(values: List[float]) -> Dict[str, float]:\n",
    "    count = len(values)\n",
    "    if count == 0:\n",
    "        return {\"count\": 0, \"mean\": None, \"min\": None, \"max\": None, \"std\": None}\n",
    "    total = sum(values)\n",
    "    mean = total / count\n",
    "    min_val = min(values)\n",
    "    max_val = max(values)\n",
    "    std = math.sqrt(sum((x - mean) ** 2 for x in values) / (count - 1)) if count > 1 else None\n",
    "    return {\"count\": count, \"mean\": mean, \"min\": min_val, \"max\": max_val, \"std\": std}\n",
    "\n",
    "def compute_categorical_stats(values: List[str]) -> Dict[str, Any]:\n",
    "    count = len(values)\n",
    "    unique_values = len(set(values))\n",
    "    counter = Counter(values)\n",
    "    most_frequent = counter.most_common(1)[0] if counter else (None, 0)\n",
    "    return {\"count\": count, \"unique\": unique_values, \"most_frequent\": most_frequent[0], \"most_frequent_count\": most_frequent[1]}\n",
    "\n",
    "def select_default_grouping_column(data: List[Dict], columns: List[str]) -> str:\n",
    "    for col in columns:\n",
    "        values = [row[col] for row in data if row[col] is not None and row[col] != '']\n",
    "        unique_count = len(set(values))\n",
    "        if 2 <= unique_count <= 100:\n",
    "            return col\n",
    "    return columns[0] if columns else None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1eebee25-19be-4c4a-a2f1-961ee52c7927",
   "metadata": {},
   "outputs": [],
   "source": [
    "def analyze_dataset(file_path: str, group_cols: List[str] = [\"page_id\", \"ad_id\"], max_columns: int = 10, max_groups: int = 3) -> None:\n",
    "    try:\n",
    "        with open(file_path, newline='', encoding='utf-8') as csvfile:\n",
    "            reader = csv.DictReader(csvfile)\n",
    "            data = [row for row in reader]\n",
    "            columns = reader.fieldnames[:max_columns]\n",
    "            print(\"Analyzing columns:\", columns)\n",
    "    except Exception as e:\n",
    "        print(f\"Error reading CSV file: {e}\")\n",
    "        return\n",
    "    \n",
    "    if not data or not columns:\n",
    "        print(\"Empty dataset or no columns found.\")\n",
    "        return\n",
    "    \n",
    "    column_data = {col: [row[col] for row in data] for col in columns}\n",
    "    \n",
    "    print(\"=== Per-Column Statistics ===\")\n",
    "    for col in columns:\n",
    "        values = [v for v in column_data[col] if v is not None and v != '']\n",
    "        if not values:\n",
    "            print(f\"\\nColumn: {col}\\n  Empty column\")\n",
    "            continue\n",
    "        if all(is_numeric(v) for v in values):\n",
    "            numeric_values = [float(v) for v in values]\n",
    "            stats = compute_numeric_stats(numeric_values)\n",
    "            print(f\"\\nColumn: {col} (Numeric)\")\n",
    "            print(f\"  Count: {stats['count']}\")\n",
    "            print(f\"  Mean: {stats['mean']:.2f}\" if stats['mean'] is not None else \"  Mean: None\")\n",
    "            print(f\"  Min: {stats['min']:.2f}\" if stats['min'] is not None else \"  Min: None\")\n",
    "            print(f\"  Max: {stats['max']:.2f}\" if stats['max'] is not None else \"  Max: None\")\n",
    "            print(f\"  Std: {stats['std']:.2f}\" if stats['std'] is not None else \"  Std: None\")\n",
    "        else:\n",
    "            stats = compute_categorical_stats(values)\n",
    "            print(f\"\\nColumn: {col} (Categorical)\")\n",
    "            print(f\"  Count: {stats['count']}\")\n",
    "            print(f\"  Unique Values: {stats['unique']}\")\n",
    "            print(f\"  Most Frequent: {stats['most_frequent']} (Count: {stats['most_frequent_count']})\")\n",
    "\n",
    "    if group_cols and all(col in reader.fieldnames for col in group_cols):\n",
    "        print(f\"\\n=== Aggregated by {', '.join(group_cols)} ===\")\n",
    "        grouped_data = {}\n",
    "        for row in data:\n",
    "            key = tuple(row.get(col, '') for col in group_cols)\n",
    "            if key not in grouped_data:\n",
    "                grouped_data[key] = []\n",
    "            grouped_data[key].append(row)\n",
    "        \n",
    "        for key in list(grouped_data.keys())[:max_groups]:\n",
    "            rows = grouped_data[key]\n",
    "            print(f\"\\nGroup: page_id={key[0]}, ad_id={key[1]}\")\n",
    "            column_data_group = {col: [row[col] for row in rows] for col in columns}\n",
    "            for col in columns:\n",
    "                values = [v for v in column_data_group[col] if v is not None and v != '']\n",
    "                if not values:\n",
    "                    continue\n",
    "                if all(is_numeric(v) for v in values):\n",
    "                    numeric_values = [float(v) for v in values]\n",
    "                    stats = compute_numeric_stats(numeric_values)\n",
    "                    print(f\"  Column: {col} (Numeric)\")\n",
    "                    print(f\"    Count: {stats['count']}\")\n",
    "                    print(f\"    Mean: {stats['mean']:.2f}\" if stats['mean'] is not None else \"    Mean: None\")\n",
    "                    print(f\"    Min: {stats['min']:.2f}\" if stats['min'] is not None else \"    Min: None\")\n",
    "                    print(f\"    Max: {stats['max']:.2f}\" if stats['max'] is not None else \"    Max: None\")\n",
    "                    print(f\"    Std: {stats['std']:.2f}\" if stats['std'] is not None else \"    Std: None\")\n",
    "                else:\n",
    "                    stats = compute_categorical_stats(values)\n",
    "                    print(f\"  Column: {col} (Categorical)\")\n",
    "                    print(f\"    Count: {stats['count']}\")\n",
    "                    print(f\"    Unique Values: {stats['unique']}\")\n",
    "                    print(f\"    Most Frequent: {stats['most_frequent']} (Count: {stats['most_frequent_count']})\")\n",
    "    else:\n",
    "        default_group_col = select_default_grouping_column(data, reader.fieldnames)\n",
    "        if default_group_col:\n",
    "            print(f\"\\n=== Aggregated by {default_group_col} (default) ===\")\n",
    "            grouped_data = {}\n",
    "            for row in data:\n",
    "                key = (row.get(default_group_col, ''),)\n",
    "                if key not in grouped_data:\n",
    "                    grouped_data[key] = []\n",
    "                grouped_data[key].append(row)\n",
    "            \n",
    "            for key in list(grouped_data.keys())[:max_groups]:\n",
    "                rows = grouped_data[key]\n",
    "                print(f\"\\nGroup: {default_group_col}={key[0]}\")\n",
    "                column_data_group = {col: [row[col] for row in rows] for col in columns}\n",
    "                for col in columns:\n",
    "                    values = [v for v in column_data_group[col] if v is not None and v != '']\n",
    "                    if not values:\n",
    "                        continue\n",
    "                    if all(is_numeric(v) for v in values):\n",
    "                        numeric_values = [float(v) for v in values]\n",
    "                        stats = compute_numeric_stats(numeric_values)\n",
    "                        print(f\"  Column: {col} (Numeric)\")\n",
    "                        print(f\"    Count: {stats['count']}\")\n",
    "                        print(f\"    Mean: {stats['mean']:.2f}\" if stats['mean'] is not None else \"    Mean: None\")\n",
    "                        print(f\"    Min: {stats['min']:.2f}\" if stats['min'] is not None else \"    Min: None\")\n",
    "                        print(f\"    Max: {stats['max']:.2f}\" if stats['max'] is not None else \"    Max: None\")\n",
    "                        print(f\"    Std: {stats['std']:.2f}\" if stats['std'] is not None else \"    Std: None\")\n",
    "                    else:\n",
    "                        stats = compute_categorical_stats(values)\n",
    "                        print(f\"  Column: {col} (Categorical)\")\n",
    "                        print(f\"    Count: {stats['count']}\")\n",
    "                        print(f\"    Unique Values: {stats['unique']}\")\n",
    "                        print(f\"    Most Frequent: {stats['most_frequent']} (Count: {stats['most_frequent_count']})\")\n",
    "        else:\n",
    "            print(\"\\nNo suitable column found for default aggregation.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5c6c2dca-3373-45aa-9b72-f102829da832",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Analyzing columns: ['page_id', 'ad_id', 'ad_creation_time', 'bylines', 'currency', 'delivery_by_region', 'demographic_distribution', 'estimated_audience_size', 'estimated_impressions', 'estimated_spend']\n",
      "=== Per-Column Statistics ===\n",
      "\n",
      "Column: page_id (Categorical)\n",
      "  Count: 246745\n",
      "  Unique Values: 4475\n",
      "  Most Frequent: 4d66f5853f0365dba032a87704a634f023d15babde973bb7a284ed8cd2707b2d (Count: 55503)\n",
      "\n",
      "Column: ad_id (Categorical)\n",
      "  Count: 246745\n",
      "  Unique Values: 246745\n",
      "  Most Frequent: 0ddb025b8544e2d58e6977ad417e742a52522b3e1fc1c9d9b61c57148f8d72fc (Count: 1)\n",
      "\n",
      "Column: ad_creation_time (Categorical)\n",
      "  Count: 246745\n",
      "  Unique Values: 547\n",
      "  Most Frequent: 2024-10-27 (Count: 8619)\n",
      "\n",
      "Column: bylines (Categorical)\n",
      "  Count: 245736\n",
      "  Unique Values: 3790\n",
      "  Most Frequent: HARRIS FOR PRESIDENT (Count: 49788)\n",
      "\n",
      "Column: currency (Categorical)\n",
      "  Count: 246745\n",
      "  Unique Values: 18\n",
      "  Most Frequent: USD (Count: 246599)\n",
      "\n",
      "Column: delivery_by_region (Categorical)\n",
      "  Count: 246745\n",
      "  Unique Values: 141122\n",
      "  Most Frequent: {} (Count: 30989)\n",
      "\n",
      "Column: demographic_distribution (Categorical)\n",
      "  Count: 246745\n",
      "  Unique Values: 215622\n",
      "  Most Frequent: {} (Count: 30989)\n",
      "\n",
      "Column: estimated_audience_size (Numeric)\n",
      "  Count: 246745\n",
      "  Mean: 556462.86\n",
      "  Min: 0.00\n",
      "  Max: 1000001.00\n",
      "  Std: 409864.76\n",
      "\n",
      "Column: estimated_impressions (Numeric)\n",
      "  Count: 246745\n",
      "  Mean: 45601.53\n",
      "  Min: 499.00\n",
      "  Max: 1000000.00\n",
      "  Std: 136790.77\n",
      "\n",
      "Column: estimated_spend (Numeric)\n",
      "  Count: 246745\n",
      "  Mean: 1061.29\n",
      "  Min: 49.00\n",
      "  Max: 474999.00\n",
      "  Std: 4992.56\n",
      "\n",
      "=== Aggregated by page_id, ad_id ===\n",
      "\n",
      "Group: page_id=4ff23a48b53d988df50ddfebb0e442a984ab8f94e874ef9b9cb34394e0c5d230, ad_id=0ddb025b8544e2d58e6977ad417e742a52522b3e1fc1c9d9b61c57148f8d72fc\n",
      "  Column: page_id (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: 4ff23a48b53d988df50ddfebb0e442a984ab8f94e874ef9b9cb34394e0c5d230 (Count: 1)\n",
      "  Column: ad_id (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: 0ddb025b8544e2d58e6977ad417e742a52522b3e1fc1c9d9b61c57148f8d72fc (Count: 1)\n",
      "  Column: ad_creation_time (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: 2024-10-21 (Count: 1)\n",
      "  Column: bylines (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: Texas Organizing Project PAC (Count: 1)\n",
      "  Column: currency (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: USD (Count: 1)\n",
      "  Column: delivery_by_region (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: {'Texas': {'spend': 249, 'impressions': 47499}} (Count: 1)\n",
      "  Column: demographic_distribution (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: {'female_18-24': {'spend': 28, 'impressions': 5507}, 'male_45-54': {'spend': 14, 'impressions': 2757}, 'male_65+': {'spend': 3, 'impressions': 714}, 'female_65+': {'spend': 3, 'impressions': 725}, 'unknown_55-64': {'spend': 0, 'impressions': 21}, 'male_55-64': {'spend': 7, 'impressions': 1502}, 'female_55-64': {'spend': 7, 'impressions': 1520}, 'unknown_45-54': {'spend': 0, 'impressions': 40}, 'female_45-54': {'spend': 14, 'impressions': 2735}, 'male_18-24': {'spend': 21, 'impressions': 4055}, 'unknown_35-44': {'spend': 0, 'impressions': 69}, 'male_35-44': {'spend': 26, 'impressions': 5149}, 'female_35-44': {'spend': 28, 'impressions': 5528}, 'unknown_25-34': {'spend': 0, 'impressions': 91}, 'male_25-34': {'spend': 41, 'impressions': 7976}, 'female_25-34': {'spend': 46, 'impressions': 8920}, 'unknown_18-24': {'spend': 0, 'impressions': 171}, 'unknown_65+': {'spend': 0, 'impressions': 10}} (Count: 1)\n",
      "  Column: estimated_audience_size (Numeric)\n",
      "    Count: 1\n",
      "    Mean: 30000.00\n",
      "    Min: 30000.00\n",
      "    Max: 30000.00\n",
      "    Std: None\n",
      "  Column: estimated_impressions (Numeric)\n",
      "    Count: 1\n",
      "    Mean: 47499.00\n",
      "    Min: 47499.00\n",
      "    Max: 47499.00\n",
      "    Std: None\n",
      "  Column: estimated_spend (Numeric)\n",
      "    Count: 1\n",
      "    Mean: 249.00\n",
      "    Min: 249.00\n",
      "    Max: 249.00\n",
      "    Std: None\n",
      "\n",
      "Group: page_id=4ff23a48b53d988df50ddfebb0e442a984ab8f94e874ef9b9cb34394e0c5d230, ad_id=86229868e6bde3661724fe02da93504bb4fb5da8c2550d7b7cf193c687e89fa6\n",
      "  Column: page_id (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: 4ff23a48b53d988df50ddfebb0e442a984ab8f94e874ef9b9cb34394e0c5d230 (Count: 1)\n",
      "  Column: ad_id (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: 86229868e6bde3661724fe02da93504bb4fb5da8c2550d7b7cf193c687e89fa6 (Count: 1)\n",
      "  Column: ad_creation_time (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: 2024-10-18 (Count: 1)\n",
      "  Column: bylines (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: Texas Organizing Project PAC (Count: 1)\n",
      "  Column: currency (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: USD (Count: 1)\n",
      "  Column: delivery_by_region (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: {'Texas': {'spend': 49, 'impressions': 22499}} (Count: 1)\n",
      "  Column: demographic_distribution (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: {'female_18-24': {'spend': 8, 'impressions': 3904}, 'male_45-54': {'spend': 2, 'impressions': 1129}, 'male_65+': {'spend': 0, 'impressions': 299}, 'female_65+': {'spend': 0, 'impressions': 251}, 'unknown_55-64': {'spend': 0, 'impressions': 5}, 'male_55-64': {'spend': 1, 'impressions': 602}, 'female_55-64': {'spend': 0, 'impressions': 456}, 'unknown_45-54': {'spend': 0, 'impressions': 15}, 'female_45-54': {'spend': 1, 'impressions': 856}, 'male_18-24': {'spend': 6, 'impressions': 2922}, 'unknown_35-44': {'spend': 0, 'impressions': 23}, 'male_35-44': {'spend': 4, 'impressions': 2145}, 'female_35-44': {'spend': 3, 'impressions': 1726}, 'unknown_25-34': {'spend': 0, 'impressions': 31}, 'male_25-34': {'spend': 9, 'impressions': 4323}, 'female_25-34': {'spend': 8, 'impressions': 3744}, 'unknown_18-24': {'spend': 0, 'impressions': 53}, 'unknown_65+': {'spend': 0, 'impressions': 5}} (Count: 1)\n",
      "  Column: estimated_audience_size (Numeric)\n",
      "    Count: 1\n",
      "    Mean: 75000.00\n",
      "    Min: 75000.00\n",
      "    Max: 75000.00\n",
      "    Std: None\n",
      "  Column: estimated_impressions (Numeric)\n",
      "    Count: 1\n",
      "    Mean: 22499.00\n",
      "    Min: 22499.00\n",
      "    Max: 22499.00\n",
      "    Std: None\n",
      "  Column: estimated_spend (Numeric)\n",
      "    Count: 1\n",
      "    Mean: 49.00\n",
      "    Min: 49.00\n",
      "    Max: 49.00\n",
      "    Std: None\n",
      "\n",
      "Group: page_id=4ff23a48b53d988df50ddfebb0e442a984ab8f94e874ef9b9cb34394e0c5d230, ad_id=07b5aefc27e872e971f793e49aac38496fa62e484f3928e2b6a2b6e3e08cac8d\n",
      "  Column: page_id (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: 4ff23a48b53d988df50ddfebb0e442a984ab8f94e874ef9b9cb34394e0c5d230 (Count: 1)\n",
      "  Column: ad_id (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: 07b5aefc27e872e971f793e49aac38496fa62e484f3928e2b6a2b6e3e08cac8d (Count: 1)\n",
      "  Column: ad_creation_time (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: 2024-10-13 (Count: 1)\n",
      "  Column: bylines (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: Texas Organizing Project PAC (Count: 1)\n",
      "  Column: currency (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: USD (Count: 1)\n",
      "  Column: delivery_by_region (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: {'Texas': {'spend': 149, 'impressions': 32499}} (Count: 1)\n",
      "  Column: demographic_distribution (Categorical)\n",
      "    Count: 1\n",
      "    Unique Values: 1\n",
      "    Most Frequent: {'female_18-24': {'spend': 26, 'impressions': 5791}, 'male_45-54': {'spend': 7, 'impressions': 1573}, 'male_65+': {'spend': 1, 'impressions': 370}, 'female_65+': {'spend': 1, 'impressions': 298}, 'unknown_55-64': {'spend': 0, 'impressions': 9}, 'male_55-64': {'spend': 3, 'impressions': 790}, 'female_55-64': {'spend': 2, 'impressions': 578}, 'unknown_45-54': {'spend': 0, 'impressions': 21}, 'female_45-54': {'spend': 5, 'impressions': 1191}, 'male_18-24': {'spend': 19, 'impressions': 4285}, 'unknown_35-44': {'spend': 0, 'impressions': 27}, 'male_35-44': {'spend': 13, 'impressions': 2954}, 'female_35-44': {'spend': 11, 'impressions': 2531}, 'unknown_25-34': {'spend': 0, 'impressions': 37}, 'male_25-34': {'spend': 28, 'impressions': 6189}, 'female_25-34': {'spend': 26, 'impressions': 5750}, 'unknown_18-24': {'spend': 0, 'impressions': 87}, 'unknown_65+': {'spend': 0, 'impressions': 9}} (Count: 1)\n",
      "  Column: estimated_audience_size (Numeric)\n",
      "    Count: 1\n",
      "    Mean: 75000.00\n",
      "    Min: 75000.00\n",
      "    Max: 75000.00\n",
      "    Std: None\n",
      "  Column: estimated_impressions (Numeric)\n",
      "    Count: 1\n",
      "    Mean: 32499.00\n",
      "    Min: 32499.00\n",
      "    Max: 32499.00\n",
      "    Std: None\n",
      "  Column: estimated_spend (Numeric)\n",
      "    Count: 1\n",
      "    Mean: 149.00\n",
      "    Min: 149.00\n",
      "    Max: 149.00\n",
      "    Std: None\n"
     ]
    }
   ],
   "source": [
    "dataset_path = \"2024_fb_ads_president_scored_anon.csv\"\n",
    "grouping_columns = [\"page_id\", \"ad_id\"]  # Grouping by both page_id and ad_id\n",
    "analyze_dataset(dataset_path, grouping_columns, max_columns=10, max_groups=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fbb716c5-92a6-4846-a568-5d0e8c108a68",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
